swagger: '2.0'
info:
  version: '0.1.0'
  title: 'Behandlungsjournal'
  description: 'Ein Behandlungsjournal f√ºr kranke Tiere'
  license:
    name: 'MIT'
host: localhost
schemes:
  - 'http'
basePath: '/api'
consumes:
  - application/json
produces:
  - application/json
paths:
 /user/login:
   get:
     tags:
     - "user"
     summary: "Logs user into behandlungsjournal"
     description: ""
     operationId: "loginUser"
     produces:
     - "application/json"
     parameters:
      - in: "body"
        name: "body"
        description: "User transported in body"
        required: true
        schema:
          $ref: "#/definitions/User"
     responses:
       201:
         description: "successful operation"
         schema:
           $ref: '#/definitions/Token'
       400:
         description: "Invalid username/password supplied"
 /user/logout:
   get:
     tags:
     - "user"
     summary: "Logs out current logged in user session"
     description: ""
     operationId: "logoutUser"
     produces:
     - "application/json"
     parameters: []
     responses:
       default:
         description: "successful operation"

 /users:
   get:
     operationId: 'getAllUsers'
     description: 'Returns all users'
     produces:
        - application/json
     tags:
        - 'user'
     responses:
      "200":
       description: 'A list of all users.'
       schema:
        type: 'array'
        items:
         $ref: '#/definitions/User'
      default:
       description: 'Unexpected error'
       schema:
         $ref: '#/definitions/Error'
 /user/{_id}:
    get:
     operationId: 'getUserbyId'
     description: 'Returns user by Id (ObjectID)'
     produces:
        - "application/json"
     parameters:
       - name: _id
         in: path
         required: true
         type: string
         description: "Mongodb [ObjectID](https://docs.mongodb.com/v3.2/reference/method/ObjectId/)"
     tags:
        - "user"
     responses:
      "200":
       description: 'Returns user by ID'
       schema:
        type: 'array'
        items:
         $ref: '#/definitions/User'
      default:
       description: 'Unexpected error'
       schema:
        $ref: '#/definitions/Error'
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/json"
      parameters:
      - name: "_id"
        in: "path"
        description: "Mongodb [ObjectID](https://docs.mongodb.com/v3.2/reference/method/ObjectId/)"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "User transported in body"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        200:
          description: "User updated"
        400:
          description: "Invalid user supplied"
        404:
          description: "User not found"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "Delete User by Id."
      operationId: "deleteUser"
      produces:
      - "application/json"
      parameters:
      - name: "_id"
        in: "path"
        description: "User _id to be deleted"
        required: true
        type: "string"
      responses:
        200:
          description: "User is deleted"
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
 /user/count:
     get:
      operationId: 'countUsers'
      description: 'Returns quantity of Users'
      produces:
         - "application/json"
      tags:
         - "user"
      responses:
       "200":
        description: 'Returns quantity of Users'
        schema:
         $ref: '#/definitions/Count'
       default:
        description: 'Unexpected error'
        schema:
         $ref: '#/definitions/Error'
 /user:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "Create User."
      operationId: "addUser"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"

 /medications:
   get:
     operationId: 'getAllMedications'
     description: 'Returns all medications'
     produces:
        - application/json
     tags:
        - 'medication'
     responses:
      "200":
       description: 'A list of all medications.'
       schema:
        type: 'array'
        items:
         $ref: '#/definitions/Medication'
      default:
       description: 'Unexpected error'
       schema:
         $ref: '#/definitions/Error'
 /medications/{journal_id}:
   get:
     tags:
     - 'medication'
     operationId: 'getMedicationsByJournalId'
     description: 'Returns all Medications for a Journal by Journal._id'
     produces:
        - application/json
     parameters:
     - name: "journal_id"
       in: "path"
       description: "Journal._id Mongodb [ObjectID](https://docs.mongodb.com/v3.2/reference/method/ObjectId/)"
       required: true
       type: "string"
     responses:
      "200":
         description: 'A list of Medications for one Journal.'
         schema:
          type: 'array'
          items:
           $ref: '#/definitions/Medication'
      default:
       description: 'Unexpected error'
       schema:
         $ref: '#/definitions/Error'
 /medication/{_id}:
   put:
     tags:
     - "medication"
     summary: "Updated medication"
     description: ""
     operationId: "updateMedication"
     produces:
     - "application/json"
     parameters:
     - name: "_id"
       in: "path"
       description: "Mongodb [ObjectID](https://docs.mongodb.com/v3.2/reference/method/ObjectId/)"
       required: true
       type: "string"
     - in: "body"
       name: "body"
       description: "Medication transported in body"
       required: true
       schema:
         $ref: "#/definitions/Medication"
     responses:
       200:
         description: "Medication updated"
       400:
         description: "Invalid Medication supplied"
       404:
         description: "Medication not found"
   delete:
     tags:
     - "medication"
     summary: "Delete Medication"
     description: "Delete Medication by Id."
     operationId: "deleteMedication"
     produces:
     - "application/json"
     parameters:
     - name: "_id"
       in: "path"
       description: "Medication _id to be deleted"
       required: true
       type: "string"
     responses:
       200:
         description: "Medication is deleted"
       400:
         description: "Invalid Medication name supplied"
       404:
         description: "Medication not found"
 /medication:
   post:
     tags:
     - 'medication'
     summary: "Create Medication"
     description: "Create a Medication."
     operationId: "addMedication"
     produces:
     - "application/json"
     parameters:
     - in: "body"
       name: "body"
       description: "Created medication object"
       required: true
       schema:
         $ref: "#/definitions/Medication"
     responses:
       default:
         description: "successful operation"

 /indicators:
   get:
     operationId: 'getAllIndicators'
     description: 'Returns all indicators'
     produces:
        - application/json
     tags:
        - 'indikator'
     responses:
      "200":
       description: 'A list of all indicators.'
       schema:
        type: 'array'
        items:
         $ref: '#/definitions/Indikator'
      default:
       description: 'Unexpected error'
       schema:
         $ref: '#/definitions/Error'
 /indicators/{journal_id}:
   get:
     tags:
     - 'indikator'
     operationId: 'getIndicatorsByJournalId'
     description: 'Returns all Indikators for a Journal by Journal._id'
     produces:
        - application/json
     parameters:
     - name: "journal_id"
       in: "path"
       description: "Journal._id Mongodb [ObjectID](https://docs.mongodb.com/v3.2/reference/method/ObjectId/)"
       required: true
       type: "string"
     responses:
      "200":
         description: 'A list of Indikators for one Journal.'
         schema:
          type: 'array'
          items:
           $ref: '#/definitions/Indikator'
      default:
       description: 'Unexpected error'
       schema:
         $ref: '#/definitions/Error'
 /indicator/{_id}:
   put:
     tags:
     - "indikator"
     summary: "Updated indikator"
     description: ""
     operationId: "updateIndicator"
     produces:
     - "application/json"
     parameters:
     - name: "_id"
       in: "path"
       description: "Mongodb [ObjectID](https://docs.mongodb.com/v3.2/reference/method/ObjectId/)"
       required: true
       type: "string"
     - in: "body"
       name: "body"
       description: "Indicator transported in body"
       required: true
       schema:
         $ref: "#/definitions/Indikator"
     responses:
       200:
         description: "Indicator updated"
       400:
         description: "Invalid Indicator supplied"
       404:
         description: "Indicator not found"
   delete:
     tags:
     - "indikator"
     summary: "Delete Indicator"
     description: "Delete Indicator by Id."
     operationId: "deleteIndicator"
     produces:
     - "application/json"
     parameters:
     - name: "_id"
       in: "path"
       description: "Indicator _id to be deleted"
       required: true
       type: "string"
     responses:
       200:
         description: "Indicator is deleted"
       400:
         description: "Invalid Indicator name supplied"
       404:
         description: "Indicator not found"
 /indicator:
   post:
     tags:
     - 'indikator'
     summary: "Create Indicator"
     description: "Create a Indicator."
     operationId: "addIndicator"
     produces:
     - "application/json"
     parameters:
     - in: "body"
       name: "body"
       description: "Created indicator object"
       required: true
       schema:
         $ref: "#/definitions/Indikator"
     responses:
       default:
         description: "successful operation"


 /patients:
   get:
     operationId: 'getAllPatients'
     description: 'Returns all patients'
     produces:
        - application/json
     tags:
        - 'patient'
     responses:
      "200":
       description: 'A list of all patients.'
       schema:
        type: 'array'
        items:
         $ref: '#/definitions/Patient'
      default:
       description: 'Unexpected error'
       schema:
         $ref: '#/definitions/Error'

 /patient/{_id}:
   put:
     tags:
     - "patient"
     summary: "Updated patient"
     description: ""
     operationId: "updatePatient"
     produces:
     - "application/json"
     parameters:
     - name: "_id"
       in: "path"
       description: "Mongodb [ObjectID](https://docs.mongodb.com/v3.2/reference/method/ObjectId/)"
       required: true
       type: "string"
     - in: "body"
       name: "body"
       description: "Patient transported in body"
       required: true
       schema:
         $ref: "#/definitions/Patient"
     responses:
       200:
         description: "Patient updated"
       400:
         description: "Invalid Patient supplied"
       404:
         description: "Patient not found"
   delete:
     tags:
     - "patient"
     summary: "Delete Patient"
     description: "Delete Patient by Id."
     operationId: "deletePatient"
     produces:
     - "application/json"
     parameters:
     - name: "_id"
       in: "path"
       description: "Patient _id to be deleted"
       required: true
       type: "string"
     responses:
       200:
         description: "Paitent is deleted"
       400:
         description: "Invalid Patientname supplied"
       404:
         description: "Patient not found"
 /patient:
   post:
     tags:
     - 'patient'
     summary: "Create Patient"
     description: "Create a Patient."
     operationId: "addPatient"
     produces:
     - "application/json"
     parameters:
     - in: "body"
       name: "body"
       description: "Created patent object"
       required: true
       schema:
         $ref: "#/definitions/Patient"
     responses:
       default:
         description: "successful operation"

 /journals:
   get:
     operationId: 'getAllJournals'
     description: 'Returns all Journals'
     produces:
        - application/json
     tags:
        - 'journal'
     responses:
      "200":
       description: 'A list of all Journals.'
       schema:
        type: 'array'
        items:
         $ref: '#/definitions/Journal'
      default:
       description: 'Unexpected error'
       schema:
         $ref: '#/definitions/Error'

 /journals/{patient_id}:
   get:
     tags:
     - 'journal'
     operationId: 'getAllJournalsbyPatient'
     description: 'Returns all Journals for a Patient by Patient._id'
     produces:
        - application/json
     parameters:
     - name: "patient_id"
       in: "path"
       description: "Patient._id Mongodb [ObjectID](https://docs.mongodb.com/v3.2/reference/method/ObjectId/)"
       required: true
       type: "string"
     responses:
      "200":
         description: 'A list of all Journals for one Patient.'
         schema:
          type: 'array'
          items:
           $ref: '#/definitions/Journal'
      default:
       description: 'Unexpected error'
       schema:
         $ref: '#/definitions/Error'

 /journal/{_id}:
   put:
     tags:
     - "journal"
     summary: "Update Journal"
     description: "Updates a Journal by Journal _id "
     operationId: "updateJournal"
     produces:
     - "application/json"
     parameters:
     - name: "_id"
       in: "path"
       description: "Mongodb [ObjectID](https://docs.mongodb.com/v3.2/reference/method/ObjectId/)"
       required: true
       type: "string"
     - in: "body"
       name: "body"
       description: "Journal transported in body"
       required: true
       schema:
         $ref: "#/definitions/Journal"
     responses:
       200:
         description: "Journal Updated"
       400:
         description: "Invalid Journal supplied"
       404:
         description: "Journal not found"
   delete:
     tags:
     - "journal"
     summary: "Delete Journal"
     description: "Delete Journal by _id."
     operationId: "deleteJournal"
     produces:
     - "application/json"
     parameters:
     - name: "_id"
       in: "path"
       description: "Journal _id to be deleted"
       required: true
       type: "string"
     responses:
       200:
         description: "Journal is deleted"
       400:
         description: "Invalid Journalname supplied"
       404:
         description: "Journal not found"
 /journal:
   post:
     tags:
     - 'journal'
     summary: "Create Journal"
     description: "Create a Journal."
     operationId: "addJournal"
     produces:
     - "application/json"
     parameters:
     - in: "body"
       name: "body"
       description: "Created journal object"
       required: true
       schema:
         $ref: "#/definitions/Journal"
     responses:
       default:
         description: "successful operation"
definitions:
  User:
    type: "object"
    properties:
       _id:
         type: "string"
       name:
         type: "string"
       email:
         type: "string"
       password:
         type: "string"
  Patient:
    type: "object"
    properties:
        _id:
          type: "string"
        name:
          type: "string"
        tierart:
          type: "string"
        rasse:
          type: "string"
        eigentuemer_vorname:
          type: "string"
        eigentuemer_nachname:
          type: "string"
  Haeufigkeit:
    type: "object"
    properties:
        morgens:
          type: "boolean"
        mittags:
          type: "boolean"
        abends:
          type: "boolean"
  Dauer:
    type: "object"
    properties:
        startdatum:
          type: "string"
        enddatum:
          type: "string"
  Medication:
    type: "object"
    properties:
        _id:
          type: "string"
        name:
          type: "string"
        journal_id:
          type: "string"
        dosierung:
          type: "string"
        haeufigkeit:
          "$ref": "#/definitions/Haeufigkeit"
        dauer:
          "$ref": "#/definitions/Dauer"

  Indikator:
     type: "object"
     properties:
         _id:
           type: "string"
         name:
           type: "string"
         journal_id:
           type: "string"
         rating_id:
           type: "string"
         haeufigkeit:
           "$ref": "#/definitions/Haeufigkeit"
         dauer:
           "$ref": "#/definitions/Dauer"
  Journal:
    type: "object"
    properties:
        _id:
          type: "string"
        name:
          type: "string"
        patient_id:
          type: "string"
          description: "_id from definition Patient (mongodb objectid)"
        diagnose:
          type: "string"
        startdatum:
          type: "string"
        enddatum:
          type: "string"
  Error:
    type: object
    properties:
      code:
       type: integer
       format: int32
      message:
       type: string
      fields:
       type: string
  Count:
    type: object
    properties:
      count:
       type: integer
       format: int64
  Token:
    type: object
    properties:
      token:
       type: string



